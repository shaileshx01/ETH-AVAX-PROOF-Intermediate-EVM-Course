// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract GameClone {
 
    address public owner;
    string public name;
    string public symbol; 
    uint8 public decimals = 18;
    uint256 public totalSupply = 0;

    mapping(uint256 => string) public itemName;
    mapping(uint256 => uint256) public itemPrice;
    mapping(address => uint256) public balance;
    mapping(address => mapping(uint256 => bool)) public redeemedItems;
    mapping(address => uint256) public redeemedItemCount;

    constructor() {

        name = "Degen";
        symbol = "DGN";
        owner = msg.sender;

        addItemToStore(0, "Knife", 500);
        addItemToStore(1, "Shield", 1000);
        addItemToStore(2, "Arm", 20000);
        addItemToStore(3, "Dash", 25000);
    }

    event Mint(address indexed to, uint256 value);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);
    event Redeem(address indexed user, string itemName);

    function addItemToStore(uint256 itemId, string memory _itemName, uint256 _itemPrice) public {
        require(owner == msg.sender, "This function can only be used by the owner");
        itemName[itemId] = _itemName;
        itemPrice[itemId] = _itemPrice;
    }


    function mint() payable external {
        require(owner == msg.sender, "This function can only be used by the owner");
        totalSupply += msg.value;
        balance[msg.sender] += msg.value;
        emit Mint(msg.sender, msg.value);
        emit Transfer(address(0), msg.sender, msg.value);
    }

    
    function balanceOf(address accountAddress) external view returns (uint256) {
        return balance[accountAddress];
    }

    
    function transfer(address receiver, uint256 amount) external returns (bool) {
        require(balance[msg.sender] >= amount, "Insufficient tokens.");
        balance[msg.sender] -= amount;
        balance[receiver] += amount;
        emit Transfer(msg.sender, receiver, amount);
        return true;
    }

    
    function burn(uint256 amount) external {
        require(amount <= balance[msg.sender], "Insufficient tokens.");
        balance[msg.sender] -= amount;
        totalSupply -= amount;
        emit Burn(msg.sender, amount);
        emit Transfer(msg.sender, address(0), amount);
    }

   
    function redeemItem(uint256 itemId) external returns (string memory) {
        uint256 redemptionAmount = itemPrice[itemId];
        require(balance[msg.sender] >= redemptionAmount, "Insufficient tokens to redeem the item.");

        balance[msg.sender] -= redemptionAmount;
        redeemedItems[msg.sender][itemId] = true;
        redeemedItemCount[msg.sender]++;
        emit Redeem(msg.sender, itemName[itemId]);

        return itemName[itemId];
    }

    function getRedeemedItemCount(address user) external view returns (uint256) {
        return redeemedItemCount[user];
    }
}
